use std::str::FromStr;

use num::Rational64;

use crate::compiler::{
    callables::{Callable, ComparisonOp, FactorOp},
    Literal, SExpr,
};

grammar;

List<T>: Vec<T> = {
    <mut v:T*> <e:T> => {
        v.push(e);
        v
    }
};

pub SExprs = List<SExpr>;
Literals = List<Literal>;

SExpr: Box<SExpr> = {
    "(" <SExprs> ")" => Box::new(SExpr::Expr(<>)),
    "#(" <SExprs> ")" => Box::new(SExpr::Lambda(<>)),
    "'(" <SExprs> ")" => Box::new(SExpr::List(<>)),
    "[" <SExprs> "]" => Box::new(SExpr::Vector(<>)),
    "{" <SExprs> "}" => Box::new(SExpr::Map(<>)),
    "#{" <SExprs> "}" => Box::new(SExpr::Set(<>)),
    Literal => Box::new(SExpr::Literal(<>)),
};

Literal: Literal = {
    "nil" => Literal::Nil,
    "%" => Literal::Symbol(String::from("%")),
    ComparisonOp => Literal::Symbol(String::from(<>.name())),
    FactorOp => Literal::Symbol(String::from(<>.name())),
    Symbol => Literal::Symbol(<>),
    StringLiteral => Literal::String(<>),
    NumberLiteral => Literal::Number(<>),
};

pub NumberLiteral: Rational64 = {
    DecimalLiteral => {
        let num_parts: Vec<&str> = <>.split(".").collect();
        let integer = i64::from_str(num_parts[0]).unwrap();
        let mut decimals = i64::from_str(num_parts[1]).unwrap();
        if integer < 0 {
            decimals *= -1;
        }
        let exp = num_parts[1].len() as u32;
        let numer = (integer * 10_i64.pow(exp)) + decimals;
        Rational64::new(numer, 10_i64.pow(exp))
    },
    IntegerLiteral => {
        Rational64::from_str(<>).unwrap()
    },
};

ComparisonOp: ComparisonOp = {
    "=" => ComparisonOp::Eq,
    "!=" => ComparisonOp::Ne,
    ">" => ComparisonOp::Gt,
    "<" => ComparisonOp::Lt,
    ">=" => ComparisonOp::Ge,
    "<=" => ComparisonOp::Le,
};

FactorOp: FactorOp = {
    "+" => FactorOp::Add,
    "-" => FactorOp::Sub,
    "*" => FactorOp::Mul,
    "/" => FactorOp::Div,
};

Symbol: String = r"[A-Za-z][A-Za-z0-9!?'_-]*" => String::from(<>);
StringLiteral: String = r#""[^"]*""# => {
    let mut chars = <>.chars();
    chars.next();
    chars.next_back();
    String::from(chars.as_str())
};
IntegerLiteral: &'input str = r"[-]?[0-9]+" => <>;
DecimalLiteral: &'input str = r"[-]?[0-9]+\.[0-9]+" => <>;
