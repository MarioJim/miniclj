use std::{
    collections::HashSet,
    iter::FromIterator,
    str::FromStr,
};

use num::Rational64;

use crate::{
    callables::{ComparisonOp, FactorOp},
    value::SExpr,
    Value,
};

grammar;

List<T>: Vec<T> = {
    <mut v:T*> <e:T> => {
        v.push(e);
        v
    }
};

pub SExprs = List<SExpr>;
Values = List<Value>;

SExpr: Box<SExpr> = {
    "(" <SExprs> ")" => Box::new(SExpr::Expr(<>)),
    "#(" <SExprs> ")" => Box::new(SExpr::Lambda(<>)),
    "'(" <SExprs> ")" => Box::new(SExpr::List(<>)),
    "[" <SExprs> "]" => Box::new(SExpr::Vector(<>)),
    "#{" <Values> "}" => Box::new(SExpr::Set(HashSet::from_iter(<>))),
    Value => Box::new(SExpr::Value(<>)),
};

Value: Box<Value> = {
    "nil" => Box::new(Value::Nil),
    "%" => Box::new(Value::Identifier(String::from("%"))),
    ComparisonOp => Box::new(Value::Fn(Box::new(<>))),
    FactorOp => Box::new(Value::Fn(Box::new(<>))),
    Identifier => Box::new(Value::Identifier(<>)),
    StringLiteral => Box::new(Value::String(<>)),
    NumberLiteral => Box::new(Value::Number(<>)),
};

pub NumberLiteral: Rational64 = {
    DecimalLiteral => {
        let num_parts: Vec<&str> = <>.split(".").collect();
        let integer = i64::from_str(num_parts[0]).unwrap();
        let decimals = i64::from_str(num_parts[1]).unwrap();
        let exp = num_parts[1].len() as u32;
        let numer = (integer * 10_i64.pow(exp)) + decimals;
        Rational64::new(numer, 10_i64.pow(exp))
    },
    IntegerLiteral => {
        Rational64::from_str(<>).unwrap()
    },
};

ComparisonOp: ComparisonOp = {
    "=" => ComparisonOp::Eq,
    "!=" => ComparisonOp::Ne,
    ">" => ComparisonOp::Gt,
    "<" => ComparisonOp::Lt,
    ">=" => ComparisonOp::Ge,
    "<=" => ComparisonOp::Le,
};

FactorOp: FactorOp = {
    "+" => FactorOp::Add,
    "-" => FactorOp::Sub,
    "*" => FactorOp::Mul,
    "/" => FactorOp::Div,
};

Identifier: String = r"[A-Za-z][A-Za-z0-9!?'_-]*" => String::from(<>);
StringLiteral: String = r#""[^"]*""# => {
    let mut chars = <>.chars();
    chars.next();
    chars.next_back();
    String::from(chars.as_str())
};
IntegerLiteral: &'input str = r"[-]?[0-9]+" => <>;
DecimalLiteral: &'input str = r"[-]?[0-9]+\.[0-9]+" => <>;
