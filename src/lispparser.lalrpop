use std::str::FromStr;

use num::Rational64;
use smol_str::SmolStr;

use crate::{
    callables::{Callable, ComparisonOp, FactorOp},
    compiler::{Literal, SExpr},
};

grammar;

// Compiler-specific parsers
pub SExprs = List<SExpr>;
Literals = List<Literal>;

SExpr: SExpr = {
    "(" <SExprs> ")" => SExpr::Expr(<>),
    "#(" <SExprs> ")" => SExpr::ShortLambda(<>),
    "'(" <SExprs> ")" => SExpr::List(<>),
    "[" <SExprs> "]" => SExpr::Vector(<>),
    "{" <SExprs> "}" => SExpr::Map(<>),
    "#{" <SExprs> "}" => SExpr::Set(<>),
    Literal => SExpr::Literal(<>),
};

Literal: Literal = {
    "nil" => Literal::Nil,
    Symbol => Literal::Symbol(<>),
    StringLiteral => Literal::String(<>),
    NumberLiteral => Literal::Number(<>),
};

pub NumberLiteral: Rational64 = {
    r"[-]?[0-9]+\.[0-9]+" => {
        let num_parts: Vec<&str> = <>.split(".").collect();
        let integer = i64::from_str(num_parts[0]).unwrap();
        let mut decimals = i64::from_str(num_parts[1]).unwrap();
        if integer < 0 {
            decimals *= -1;
        }
        let exp = num_parts[1].len() as u32;
        let numer = (integer * 10_i64.pow(exp)) + decimals;
        Rational64::new(numer, 10_i64.pow(exp))
    },
    r"[-]?[0-9]+" => Rational64::from_str(<>).unwrap(),
};

// Shared parser rules
List<T>: Vec<T> = {
    <mut v:T*> <e:T> => {
        v.push(e);
        v
    }
};

Symbol: SmolStr = {
    "%" => SmolStr::from("%"),
    ComparisonOp => SmolStr::from(<>.name()),
    FactorOp => SmolStr::from(<>.name()),
    r"[A-Za-z][A-Za-z0-9!?'_-]*" => SmolStr::from(<>),
};

ComparisonOp: ComparisonOp = {
    "=" => ComparisonOp::Eq,
    "!=" => ComparisonOp::Ne,
    ">" => ComparisonOp::Gt,
    "<" => ComparisonOp::Lt,
    ">=" => ComparisonOp::Ge,
    "<=" => ComparisonOp::Le,
};

FactorOp: FactorOp = {
    "+" => FactorOp::Add,
    "-" => FactorOp::Sub,
    "*" => FactorOp::Mul,
    "/" => FactorOp::Div,
};

StringLiteral: String = r#""[^"]*""# => {
    let mut chars = <>.chars();
    chars.next();
    chars.next_back();
    String::from(chars.as_str())
};
